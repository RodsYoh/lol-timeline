/**
 * Take two dates as parameter and return the number of days between them
 *
 * @param startDate when the event starts
 * @param endDate when the event ent ends
 * @returns number of days between the two dates
 */
export const getDaysBetweenDates = (startDate: Date, endDate: Date) => {
  const diffTime = Math.abs(endDate.getTime() - startDate.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays;
};

// TODO: get more frames from excalidraw and figma
const frames = {
  small: [
    "M9.6149 2.56885C21.8358 -0.649098 37.946 1.9856 64.4574 2.56885M9.6149 2.56885C28.4012 1.18111 43.78 3.71525 64.4574 2.56885M64.4574 2.56885C69.7561 4.43929 73.0032 4.94209 72.6642 11.8003M64.4574 2.56885C66.2415 6.97342 69.3458 4.6203 72.6642 11.8003M72.6642 11.8003C73.913 16.2653 71.1656 21.3335 72.6642 30.2834M72.6642 11.8003C72.6642 18.7391 72.914 25.2755 72.6642 30.2834M72.6642 30.2834C73.6454 34.6679 70.559 40.5608 64.4574 39.5351M72.6642 30.2834C70.6303 35.7741 71.897 43.5776 64.4574 39.5351M64.4574 39.5351C45.8317 42.3105 28.5796 43.296 9.6149 39.5351M64.4574 39.5351C49.6853 39.8166 36.5901 39.8971 9.6149 39.5351M9.6149 39.5351C2.15746 38.6501 3.6204 37.6646 1.42598 30.2834M9.6149 39.5351C3.76313 37.6646 -0.375934 32.898 1.42598 30.2834M1.42598 30.2834C0.551786 26.3415 2.12177 19.0608 1.42598 11.8003M1.42598 30.2834C1.14053 24.1895 2.19314 19.3424 1.42598 11.8003M1.42598 11.8003C1.81848 6.75219 4.74437 2.46829 9.6149 2.56885M1.42598 11.8003C3.40631 2.00571 5.74345 2.91076 9.6149 2.56885",
  ],
  medium: [
    "M13.633 6.91999C147.75 8.39999 292.909 1.83999 469.911 6.91999M13.633 6.91999C143.538 -0.580013 268.641 0.079987 469.911 6.91999M469.911 6.91999C477.105 10.06 484.42 5.09999 479.272 17.72M469.911 6.91999C478.579 -0.980013 481.872 10.64 479.272 17.72M479.272 17.72C478.908 25.08 477.799 30.76 479.272 39.32M479.272 17.72C479.151 23.26 478.821 30.68 479.272 39.32M479.272 39.32C485.01 52.56 473.326 47.74 469.911 50.12M479.272 39.32C482.86 55.16 473.014 47.88 469.911 50.12M469.911 50.12C340.925 47.1 211.749 50.44 13.633 50.12M469.911 50.12C365.072 48.7 256.732 53.58 13.633 50.12M13.633 50.12C2.20956 46.06 5.36444 49.94 4.27237 39.32M13.633 50.12C12.5756 43.7 5.60712 51.16 4.27237 39.32M4.27237 39.32C3.56165 35.98 1.10016 26.6 4.27237 17.72M4.27237 39.32C4.63639 32.38 2.95495 26.4 4.27237 17.72M4.27237 17.72C8.08596 17.92 5.55512 5.79999 13.633 6.91999M4.27237 17.72C-2.07205 4.01999 0.684129 3.97999 13.633 6.91999",
    "M11.402 8.01126C126.624 -0.366756 246.547 -2.25963 469.678 8.01126M11.402 8.01126C182.529 3.76464 348.154 3.6165 469.678 8.01126M469.678 8.01126C474.71 3.25439 472.847 15.6321 479.08 16.8995M469.678 8.01126C473.23 10.2827 474.536 18.5126 479.08 16.8995M479.08 16.8995C476.103 20.9815 477.374 28.6682 479.08 34.6761M479.08 16.8995C479.393 22.002 478.383 24.685 479.08 34.6761M479.08 34.6761C483.641 43.9923 469.765 46.3625 469.678 43.5643M479.08 34.6761C472.76 36.3879 468.843 37.6388 469.678 43.5643M469.678 43.5643C348.519 49.7861 223.339 41.4739 11.402 43.5643M469.678 43.5643C373.799 47.169 279.156 45.4736 11.402 43.5643M11.402 43.5643C6.52705 48.0249 -0.889775 47.0702 2.00035 34.6761M11.402 43.5643C7.20606 41.3258 -1.41209 38.4783 2.00035 34.6761M2.00035 34.6761C1.32134 27.4667 0.137438 23.8126 2.00035 16.8995M2.00035 34.6761C0.346363 30.4953 1.82625 24.076 2.00035 16.8995M2.00035 16.8995C2.5923 12.3895 8.84263 14.5622 11.402 8.01126M2.00035 16.8995C8.87745 16.2741 1.68696 15.3358 11.402 8.01126",
    "M9.37539 3.84915C121.882 2.31262 235.16 -1.71068 468.344 3.84915M9.37539 3.84915C185.39 1.09956 359.717 3.72785 468.344 3.84915M468.344 3.84915C471.028 -1.60959 480.076 1.36239 475.758 15.1306M468.344 3.84915C472.556 13.0886 479.943 6.03265 475.758 15.1306M475.758 15.1306C474.695 20.9936 478.349 26.9376 475.758 37.6934M475.758 15.1306C474.775 20.6297 475.585 26.0076 475.758 37.6934M475.758 37.6934C476.914 49.8441 473.818 53.3417 468.344 48.9748M475.758 37.6934C474.124 40.6653 477.113 51.32 468.344 48.9748M468.344 48.9748C298.773 51.1785 132.352 49.743 9.37539 48.9748M468.344 48.9748C337.449 52.4117 208.959 53.5641 9.37539 48.9748M9.37539 48.9748C1.57645 45.1739 6.10701 39.9982 1.96174 37.6934M9.37539 48.9748C9.58797 54.8783 3.46307 42.6871 1.96174 37.6934M1.96174 37.6934C4.32667 29.5052 -0.124176 26.3513 1.96174 15.1306M1.96174 37.6934C0.646419 28.6561 0.712849 24.7339 1.96174 15.1306M1.96174 15.1306C0.274407 1.20065 9.0831 2.45414 9.37539 3.84915M1.96174 15.1306C2.21418 -1.58937 0.340837 1.40283 9.37539 3.84915",
  ],
  large: [
    "M14 3.00004C856.98 5.14004 1698.54 4.36004 2223.94 3.00004M14 3.00004C567.42 1.52004 1121.38 3.48004 2223.94 3.00004M14 3.00004C8.60005 -0.439962 -1.41995 0.640038 3.00005 14M2223.94 3.00004C2229.42 3.88004 2232.26 4.04004 2234.96 14M2223.94 3.00004C2229.18 1.06004 2242.66 7.38004 2234.96 14M2234.96 14C2235.72 26.54 2233.86 34.94 2234.96 36.02M2234.96 14C2236.36 23.22 2236.82 31.08 2234.96 36.02M2234.96 36.02C2229.78 39.6 2236.54 50.48 2223.94 47.04M2234.96 36.02C2236.12 34.26 2222.3 45.04 2223.94 47.04M2223.94 47.04C1651.76 47.14 1084.3 48.76 14 47.04M2223.94 47.04C1443.46 58.82 660.66 58.4 14 47.04M14 47.04C-1.19995 51.52 0.820049 35.66 3.00005 36.02M14 47.04C15.68 50.4 -5.21995 47 3.00005 36.02M3.00005 36.02C1.42005 32.66 3.76005 28.06 3.00005 14M3.00005 36.02C1.58005 29.42 2.64005 23.44 3.00005 14",
  ],
};

const backgrounds = {
  small: [
    "M10.0038 1.63361L65.7466 2.9042L76 16.316L67.6725 41.3849L62.3585 48L7.22196 33.963L0 42.6958L1.64054 17.9294L7.98874 5.8084L4.68982 0",
    "M13.3304 10.3099L66.6246 3.50976L73 19.6228L70.8611 37.1516L65.01 37.1915L11.2605 48L0 29.494L1.04877 8.914L5.40945 14.9564L5.92004 0",
    "M11.2 0.41922L60.3173 0.678737L67.3431 3.3338L69 41.5427L51.5389 43L3.13855 39.227L1.52588e-05 31.6611L0.0796736 16.2098L8.84208 0L13.0958 0.359332",
  ],
  medium: [
    "M9.59947 0.04L470.367 0L476.972 10.28L479.364 36.4L479.052 51.72L475.273 51.32L13.9158 44.12L6.53126 42.24L1.0189 34.62L0.758881 9.44L13.3437 5.22",
    "M21.1051 2.95705L472.988 9.12514L480 15.2932L475.251 32.709L473.965 45.3717L460.061 44.1744L8.41805 49L1.80019 40.8001L0 39.4757L11.5212 7.89152L19.9393 0",
    "M7.22864 8.85779L471.894 0L477.661 14.651L475.402 30.4487L480 46.1871L470.207 48.1049L10.7234 52L0 49.8844L0.518229 35.8266L7.81331 16.5095L8.82319 4.98251",
  ],
  large: [
    "M11.12 10.8L2233.76 0.420044L2242.1 7.26004L2237.4 45.94L2238.44 45.86L2233.38 52.8L18.6 53.66L0.660034 47.66L5.88003 45.78L2.40003 14.66L18.88 2.80004",
  ],
};

/**
 * Function that takes svg paths from figma to create event
 * retangular frame.
 * @returns a svg path drawing the event frame
 */
export function getRandomEventFrame(size: "small" | "medium" | "large") {
  return frames[size][Math.floor(Math.random() * frames[size].length)];
}

/**
 * Function that takes svg paths from figma to create event
 * background category.
 * @returns a svg path drawing the event background
 */
export function getRandomEventBackground(size: "small" | "medium" | "large") {
  return backgrounds[size][
    Math.floor(Math.random() * backgrounds[size].length)
  ];
}

/**
 * Function that returns a size for the event frame.
 *
 * @param sizeInDays number os days that the event will last
 * @returns objetc with the size of the event frame, test id and svg's viewbox
 */
export function handleSize(sizeInDays: number): {
  size: "small" | "medium" | "large";
  dataTestId: string;
  viewBox: string;
} {
  let size: "small" | "medium" | "large" = "large";

  if (sizeInDays < 3) size = "small";
  else if (sizeInDays < 14) size = "medium";

  const svgMap = {
    small: {
      viewBox: "0 0 73 48",
      dataTestId: "small-frame",
      size: "small" as "small",
    },
    medium: {
      viewBox: "0 0 482 54",
      dataTestId: "medium-frame",
      size: "medium" as "medium",
    },
    large: {
      viewBox: "0 0 2239 57",
      dataTestId: "large-frame",
      size: "large" as "large",
    },
  };

  return svgMap[size];
}

/**
 * Function that takes a delay in miliseconds and returns only runs
 * the function after the delay.
 *
 * @param func function to be debounced
 * @param waitFor delay in ms
 * @returns debounced function
 */
export function debounce<F extends (...args: Parameters<F>) => ReturnType<F>>(
  func: F,
  waitFor: number
): (...args: Parameters<F>) => void {
  let timeout: NodeJS.Timeout;
  return (...args: Parameters<F>): void => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), waitFor);
  };
}
